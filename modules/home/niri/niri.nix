{
  host,
  config,
  pkgs,
  ...
}:
let
  variables = import ../../../hosts/${host}/variables.nix;
  inherit (variables)
    browser
    terminal
    stylixImage
    startupApps
    ;

  barChoice = variables.barChoice or "waybar";

  # Try to import host-specific keybinds, fallback to empty if doesn't exist
  hostKeybindsPath = ./hosts/${host}/keybinds.nix;
  hostKeybinds =
    if builtins.pathExists hostKeybindsPath then import hostKeybindsPath { inherit host; } else "";

  # Import keybinds and window rules
  keybindsModule = import ./keybinds.nix {
    inherit
      host
      terminal
      browser
      barChoice
      hostKeybinds
      config
      ;
  };
  windowrulesModule = import ./windowrules.nix { inherit host; };
  layoutModule = import ./layout.nix { };
  startupModule = import ./startup.nix {
    inherit
      host
      stylixImage
      startupApps
      barChoice
      config
      ;
  };

  # Try to import host-specific outputs, fallback to empty if doesn't exist
  hostOutputsPath = ./hosts/${host}/outputs.nix;
  hostOutputs =
    if builtins.pathExists hostOutputsPath then import hostOutputsPath { inherit host; } else "";

  # Try to import host-specific window rules, fallback to empty if doesn't exist
  hostWindowRulesPath = ./hosts/${host}/windowrules.nix;
  hostWindowRules =
    if builtins.pathExists hostWindowRulesPath then
      import hostWindowRulesPath { inherit host; }
    else
      "";

in
{
  # Install Niri and related packages
  home.packages = with pkgs; [
    niri
    udiskie
    xwayland-satellite
    swww
    grim
    slurp
    wl-clipboard
    swappy
    xdg-desktop-portal-gnome
  ];

  # Generate Niri config.kdl
  xdg.configFile."niri/config.kdl".text = ''
    // Niri Configuration for ${host}
    // Generated by NixOS configuration

    ${hostOutputs}

    ${layoutModule}

    ${keybindsModule}

    ${windowrulesModule}

    ${hostWindowRules}

    ${startupModule}

    environment {
      XDG_CURRENT_DESKTOP "niri"
      MOZ_ENABLE_WAYLAND "1"
      QT_QPA_PLATFORM "wayland"
      ELECTRON_OZONE_PLATFORM_HINT "wayland"
      QT_QPA_PLATFORMTHEME "gtk3"
      QT_QPA_PLATFORMTHEME_QT6 "gtk3"
      TERMINAL "${terminal}"
      XCURSOR_THEME "Bibata-Modern-Ice"
      XCURSOR_SIZE "24"

      // NVIDIA Gaming Optimizations
      __GL_GSYNC_ALLOWED "1"
      PROTON_ENABLE_NVAPI "1"
      PROTON_HIDE_NVIDIA_GPU "0"
      PROTON_ENABLE_NGX_UPDATER "1"
    }

    hotkey-overlay {
        skip-at-startup
    }

    prefer-no-csd

    screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
  '';

  # XWayland satellite service for X11 app support
  systemd.user.services.xwayland-satellite = {
    Unit = {
      Description = "Xwayland outside Wayland";
      BindsTo = "graphical-session.target";
      After = "graphical-session.target";
    };
    Service = {
      Type = "notify";
      NotifyAccess = "all";
      ExecStart = "${pkgs.xwayland-satellite}/bin/xwayland-satellite";
      StandardOutput = "journal";
      Restart = "on-failure";
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };

  # XDG Desktop Portal services - properly configured for screen sharing
  systemd.user.services.xdg-desktop-portal = {
    Unit = {
      Description = "Portal service";
      After = [
        "graphical-session.target"
        "pipewire.service"
      ];
      PartOf = [ "graphical-session.target" ];
    };
    Service = {
      Type = "dbus";
      BusName = "org.freedesktop.portal.Desktop";
      ExecStart = "${pkgs.xdg-desktop-portal}/libexec/xdg-desktop-portal";
      Restart = "on-failure";
      Environment = [
        "XDG_CURRENT_DESKTOP=niri"
        "WAYLAND_DISPLAY=wayland-1"
      ];
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };

  systemd.user.services.xdg-desktop-portal-gnome = {
    Unit = {
      Description = "Portal service (GNOME implementation)";
      After = [
        "graphical-session.target"
        "pipewire.service"
        "xdg-desktop-portal.service"
      ];
      PartOf = [ "graphical-session.target" ];
      Requires = [ "pipewire.service" ];
    };
    Service = {
      Type = "dbus";
      BusName = "org.freedesktop.impl.portal.desktop.gnome";
      ExecStart = "${pkgs.xdg-desktop-portal-gnome}/libexec/xdg-desktop-portal-gnome";
      Restart = "on-failure";
      Environment = [
        "XDG_CURRENT_DESKTOP=niri"
      ];
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };

  systemd.user.services.xdg-desktop-portal-gtk = {
    Unit = {
      Description = "Portal service (GTK/GNOME implementation)";
      After = [
        "graphical-session.target"
        "xdg-desktop-portal.service"
      ];
      PartOf = [ "graphical-session.target" ];
    };
    Service = {
      Type = "dbus";
      BusName = "org.freedesktop.impl.portal.desktop.gtk";
      ExecStart = "${pkgs.xdg-desktop-portal-gtk}/libexec/xdg-desktop-portal-gtk";
      Restart = "on-failure";
    };
    Install.WantedBy = [ "graphical-session.target" ];
  };

  # Place wallpapers in home directory
  home.file = {
    "Pictures/Wallpapers" = {
      source = ../../../wallpapers;
      recursive = true;
    };
    ".face.icon".source = ../hyprland/face.jpg;
    ".config/face.jpg".source = ../hyprland/face.jpg;
  };
}
